What is linearizability?;<p>Linearizability makes a system appear as if there's only a single copy of the data, with atomic operations. Example:</p><ul><li>If Alice writes X=1 and Bob immediately reads X, he'll always see 1, not an old value</li></ul><p><i>(Ref: Linearizability, p. 324)</i></p>
What is the difference between linearizability and serializability?;<p>Key differences:</p><ul><li>Linearizability: recency guarantee for individual objects</li><li>Serializability: for transactions on multiple objects</li><li>Example: Linearizability ensures a read sees the latest write, serializability ensures transactions behave as if sequential</li></ul><p><i>(Ref: Linearizability Versus Serializability, p. 329)</i></p>
What are some use cases where linearizability is important?;<p>Important use cases:</p><ul><li>Locking and leader election (e.g., ensuring only one leader)</li><li>Uniqueness constraints (e.g., unique usernames)</li><li>Cross-channel timing dependencies (e.g., consistent reads across systems)</li></ul><p><i>(Ref: Relying on Linearizability, p. 330-332)</i></p>
What is the CAP theorem?;<p>CAP theorem states:</p><ul><li>Impossible for a distributed system to simultaneously provide Consistency, Availability, and Partition tolerance</li><li>Example: In a network partition, a system must choose between consistency (refusing writes) and availability (allowing potentially inconsistent writes)</li></ul><p><i>(Ref: The CAP theorem, p. 336)</i></p>
What is the cost of linearizability?;<p>Costs of linearizability:</p><ul><li>Performance costs, especially with network delays</li><li>Example: In a geo-distributed system, linearizable reads might need to contact a distant server, increasing latency</li></ul><p><i>(Ref: The Cost of Linearizability, p. 335-338)</i></p>
What is causal consistency?;<p>Causal consistency:</p><ul><li>Preserves causality between operations</li><li>Example: If Alice posts a photo and then Bob comments on it, Carol will never see Bob's comment without Alice's photo</li></ul><p><i>(Ref: Ordering and Causality, p. 339-342)</i></p>
What is a total order and how does it differ from a causal order?;<p>Order types:</p><ul><li>Total order: all elements comparable (e.g., natural numbers)</li><li>Causal order: partial order, some elements incomparable</li><li>Example: In causal order, concurrent operations like simultaneous tweets are incomparable</li></ul><p><i>(Ref: The causal order is not a total order, p. 341)</i></p>
What are sequence numbers and how are they used in distributed systems?;<p>Sequence numbers:</p><ul><li>Used to order events in distributed systems</li><li>Example: A single leader can assign increasing numbers to all operations, ensuring a clear order of execution</li></ul><p><i>(Ref: Sequence Number Ordering, p. 343-345)</i></p>
What are Lamport timestamps?;<p>Lamport timestamps are a way to order events in a distributed system:<br></p><ul><li>Each node maintains a counter of operations</li><li>Counter is included with every operation</li><li>When receiving a message, update counter to max(local, received) + 1</li><li>Provides a total ordering of events consistent with causality</li><li>Format: (counter, node ID) to break ties</li><li>Do not reflect real time, only logical ordering</li></ul><p></p><p><i>(Ref: Lamport timestamps, p. 345-347)</i></p>
What is total order broadcast?;<p>Total order broadcast:</p><ul><li>Protocol ensuring messages are delivered reliably in the same order to all nodes</li><li>Example: Ensuring all database replicas apply updates in the same order</li></ul><p><i>(Ref: Total Order Broadcast, p. 348-350)</i></p>
What is the relationship between total order broadcast and consensus?;<p>Relationship:</p><ul><li>They're equivalent: total order broadcast is like repeated rounds of consensus</li><li>Example: Agreeing on message order in total order broadcast is like reaching consensus on each message</li></ul><p><i>(Ref: Consensus algorithms and total order broadcast, p. 366-367)</i></p>
What are the properties that a consensus algorithm must satisfy?;<p>Consensus algorithm properties:</p><ul><li>Uniform agreement</li><li>Integrity</li><li>Validity</li><li>Termination</li><li>Example: In leader election, all nodes must agree on the leader (agreement), only one leader is elected (integrity), the leader was a candidate (validity), and a leader is eventually chosen (termination)</li></ul><p><i>(Ref: Fault-Tolerant Consensus, p. 364-366)</i></p>
What is the role of a coordinator in two-phase commit (2PC)?;<p>Coordinator's role in 2PC:</p><ul><li>Manages the commit process</li><li>Example: Asks all participants "Can you commit?", collects responses, then tells everyone to commit or abort</li></ul><p><i>(Ref: Introduction to two-phase commit, p. 355-357)</i></p>
What are the limitations of distributed transactions using two-phase commit?;<p>Limitations of 2PC:</p><ul><li>Performance overhead</li><li>Operational problems</li><li>Example: If the coordinator fails after "prepare" but before "commit", participants can be stuck waiting indefinitely</li></ul><p><i>(Ref: Distributed Transactions in Practice, p. 360-364)</i></p>
How do different replication methods compare in terms of providing linearizability?;<p>Replication methods and linearizability:</p><ul><li></li><li>Single-leader replication: Potentially linearizable if reads are from leader or synchronously updated followers.</li><li>Consensus algorithms: Can implement linearizable storage safely (e.g. ZooKeeper, etcd).</li><li>Multi-leader replication: Generally not linearizable due to concurrent processing of writes on multiple nodes.</li><li>Leaderless replication: Probably not linearizable, even with strict quorum reads and writes. Techniques like "last write wins" almost certainly violate linearizability.</li><li>Example: In single-leader, all writes go through one node, enabling clear ordering</li></ul><p><i>(Ref: Implementing Linearizable Systems, p. 332-334)</i></p>
What are membership and coordination services, and what do they provide?;<p>Membership and coordination services:</p><ul><li>Provide features for distributed coordination</li><li>Example: Using ZooKeeper for leader election in a distributed database to avoid split-brain scenarios</li></ul><p><i>(Ref: Membership and Coordination Services, p. 370-372)</i></p>
What is three-phase commit (3PC) and how does it differ from two-phase commit?;<p>Three-phase commit (3PC):</p><ul><li>Adds an extra phase to 2PC to avoid blocking on coordinator failure</li><li>Example: Includes a "pre-commit" phase, allowing participants to abort if the coordinator fails before the final commit</li></ul><p><i>(Ref: Three-phase commit, p. 359)</i></p>